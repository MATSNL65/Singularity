// Converted old Gridset into Grid Span.
@mixin grid-span($span, $location, $columns: $columns, $gutter-span: $gutter, $padding-span: $padding, $output-api: $output) {
  $length: length($grids);
  
  @if $length > 0 {
    $query-min: breakpoint-get-context('min-width');
    $query-max: breakpoint-get-context('max-width');

    @if $query-min {
      $query-min: breakpoint-to-base-em($query-min);
    }
    @if $query-max {
      $query-max: breakpoint-to-base-em($query-max);
    }

    $written: false;

    $gutter-length: length($gutters);
    $gutter-span: false;
    $padding-span: false;
    $padding-length: length($paddings);

    $ghr: () !default;
    $ghs: () !default;
    $phs: () !default;

    @if $query-min or $query-max {
      @for $j from 2 through $length {
        $ghr: append($ghr, nth($grids, $j), comma);
      }
      
      @for $j from 2 through $length {
        @if $gutter-length == 0 {
          $ghs: append($ghs, $gutter);
        }
        @else if $j > $gutter-length {
          $ghs: append($ghs, nth($gutters, $gutter-length));
        }
        @else {
          $ghs: append($ghs, nth($gutters, $j));
        }
      }

      @for $j from 2 through $length {
        @if $padding-length == 0 {
          $phs: append($phs, $padding);
        }
        @else if $j > $padding-length {
          $phs: append($phs, nth($paddings, $padding-length));
        }
        @else {
          $phs: append($phs, nth($paddings, $j));
        }
      }

      $ghr: reverse($ghr);

      $gthr: reverse($ghs);
      $phr: reverse($phs);

      $holder-length: length($ghr);

      @for $i from 1 through $holder-length {
        $gridholder: nth($ghr, $i);

        $grid-columns: nth($gridholder, 1);
        $grid-query: nth($gridholder, 2);

        $grid-query: breakpoint-to-base-em($grid-query);

        @if length($gridholder) < 2 {
          @warn 'Grid #{$gridholder} needs a breakpoint value!';
        }
        @else if not $written {
          @if $grids-mobile-first {
            @if $query-min and not $query-max {
              @if $query-min and $query-max {
                @if $query-min >= $grid-query and $query-max < $grid-query {
                  @if $gutter-span== false {
                    @if $gutter-length > 0 {
                      $gutter-span: nth($gthr, $i);
                    }
                    @else {
                      $gutter-span: $gutter;
                    }
                  }
                  @if $padding-span == false {
                    @if $padding-length > 0 {
                      $padding-span: nth($phr, $i);
                    }
                    @else {
                      $padding-span: $padding;
                    }
                  }
                  @include grid-build($span, $location, $grid-columns, $gutter-span, $paddings, $output-api);
                  $written: true;
                  $gutter-span: false;
                  $padding-span: false;
                }
              }
              @else if $query-min >= $grid-query {
                @if $gutter-span== false {
                  @if $gutter-length > 0 {
                    $gutter-span: nth($gthr, $i);
                  }
                  @else {
                    $gutter-span: $gutter;
                  }
                }
                @if $padding-span == false {
                  @if $padding-length > 0 {
                    $padding-span: nth($phr, $i);
                  }
                  @else {
                    $padding-span: $padding;
                  }
                }
                @include grid-build($span, $location, $grid-columns, $gutter-span, $padding-span, $output-api);
                $written: true;
                $gutter-span: false;
                $padding-span: false;
              }
            }
            @else {
              @if $query-max < $grid-query {
                @if $gutter-span== false {
                  @if $gutter-length > 0 {
                    $gutter-span: nth($gthr, $i);
                  }
                  @else {
                    $gutter-span: $gutter;
                  }
                }
                @if $padding-span   == false {
                  @if $padding-length > 0 {
                    $padding-span: nth($phr, $i);
                  }
                  @else {
                    $padding-span: $padding;
                  }
                }
                @include grid-build($span, $location, $grid-columns, $gutter-span, $padding-span, $output-api);
                $written: true;
                $gutter-span: false;
                $padding-span: false;
              }
            }
          }
          @else {
            @if $query-min and $query-max {
              @if $gutter-span== false {
                @if $gutter-length > 0 {
                  $gutter-span: nth($gthr, $i);
                }
                @else {
                  $gutter-span: $gutter;
                }
              }
              @if $padding-span == false {
                @if $padding-length > 0 {
                  $padding-span: nth($phr, $i);
                }
                @else {
                  $padding-span: $padding;
                }
              }
              @if $query-min > $grid-query and $query-max <= $grid-query {
                @include grid-build($span, $location, $grid-columns, $gutter-span, $padding-span, $output-api);
                $written: true;
                $gutter-span: false;
                $padding-span: false;
              }
            }
            @else if $query-min and not $query-max {
              @if $query-min > $grid-query {
                @if $gutter-span== false {
                  @if $gutter-length > 0 {
                    $gutter-span: nth($gthr, $i);
                  }
                  @else {
                    $gutter-span: $gutter;
                  }
                }
                @if $padding-span == false {
                  @if $padding-length > 0 {
                    $padding-span: nth($phr, $i);
                  }
                  @else {
                    $padding-span: $padding;
                  }
                }
                @include grid-build($span, $location, $grid-columns, $gutter-span, $padding-span, $output-api);
                $written: true;
                $gutter-span: false;
                $padding-span: false;
              }
            }
            @else {
              @if $query-max <= $grid-query {
                @if $gutter-span== false {
                  @if $gutter-length > 0 {
                    $gutter-span: nth($gthr, $i);
                  }
                  @else {
                    $gutter-span: $gutter;
                  }
                }
                @if $padding-span == false {
                  @if $padding-length > 0 {
                    $padding-span: nth($phr, $i);
                  }
                  @else {
                    $padding-span: $padding;
                  }
                }
                @include grid-build($span, $location, $grid-columns, $gutter-span, $padding-span, $output-api);
                $written: true;
                $gutter-span: false;
                $padding-span: false;
              }
            }
          }
        }
      }
    }
    @else {
      @if $gutter-span== false {
        @if $gutter-length > 0 {
          $gutter-span: nth($gutters, 1);
        }
        @else {
          $gutter-span: $gutter;
        }
      }

      @if $padding-span == false {
        @if $padding-length > 0 {
          $padding-span: nth($paddings, 1);
        }
        @else {
          $padding-span: $padding;
        }
      }
      
      
      @include grid-build($span, $location, nth($grids, 1), $gutter-span, $padding-span, $output-api);
    }
  }
  @else {
    @include grid-build($span, $location, $columns, $gutter-span, $padding-span, $output-api);
  }
}