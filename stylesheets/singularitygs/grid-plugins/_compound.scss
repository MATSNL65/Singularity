@function is-compound($columns: $columns) {
  @if type-of($columns) == 'list' {
    $index: index($columns, 'compound');
    @if $index {
      @return true;
    }
    @else {
      @return false;
    }
  }
  @else {
    @return false;
  }
}

@function find-compound-grid($columns: $columns, $compound-grid: false) {
  @if is-compound($columns) and not $compound-grid {
    @warn "You're using a compound grid but you haven't specified which of the grids to use! Please specify a grid.";
    @return false;
  }
  @else if is-compound($columns) and type-of($compound-grid) != 'number' {
    @warn "Your compound grid call needs to be a number.";
    @return false;
  }
  @else if is-compound($columns) and not unitless($compound-grid) {
    @warn "Your compound grid call needs to be a unitless number";
    @return false;
  }
  @else if is-compound($columns) {
    $compound-length: length($columns);
    $compound-index: index($columns, 'compound');
    @if $compound-grid <= 0 or $compound-grid % 1 != 0 {
      @warn "Your compound grid call needs to be a positive integer";
      @return false;
    }
    @else if $compound-grid > ($compound-length - 1) {
      @warn "Your compound grid call is greater than the number of grids you have";
      @return false;
    }
    @else {
      @if $compound-index == 1 {
        @return nth($columns, $compound-grid + 1);
      }
      @else if $compound-index == $compound-length {
        @return nth($columns, $compound-grid);
      }
      @else {
        @warn 'Compound declaration must either be the first or last in the list';
        @return false;
      }
    }
  }
  @else {
    @return $columns;
  }
}

//@function compound($grids...) {
//  @debug $grids;
//  $lcm: 1;
//  $grid-count: length($grids);
//  @for $i from 1 through $grid-count {
//    // Make sure the columns we've gotten in are single, positive integers
//    @if type-of(nth($grids, $i)) != 'number' or nth($grids, $i) < 0 or nth($grids, $i) % 1 != 0 {
//      @warn 'You can only compound together equal, positive integer column counts.';
//      @return false;
//    }
//    @else {
//      $lcm: $lcm * nth($grids, $i);
//    }
//  }
//  @debug $lcm;
//  
//  $compound-grid: ();
//  $compound-counter: 1;
//  
//  @for $i from 1 through $lcm {
//    @if nth($)
//  }
//  //$common-multiple: $c1 * $c2 * $c3 * $c4 * $c5 * $c6;
//  //  $compound-grid: ();
//  //  $compound-counter: 1;
//  //  @for $i from 1 through $common-multiple {
//  //    $add-col: false;
//  //    @if $c1 != 1 {
//  //      @if $i / $c1 == round($i / $c1) {
//  //        $add-col: true;
//  //      }
//  //    }
//  //    @if $c2 != 1 {
//  //      @if $i / $c2 == round($i / $c2) {
//  //        $add-col: true;
//  //      }
//  //    }
//  //    @if $c3 != 1 {
//  //      @if $i / $c3 == round($i / $c3) {
//  //        $add-col: true;
//  //      }
//  //    }
//  //    @if $c4 != 1 {
//  //      @if $i / $c4 == round($i / $c4) {
//  //        $add-col: true;
//  //      }
//  //    }
//  //    @if $c5 != 1 {
//  //      @if $i / $c5 == round($i / $c5) {
//  //        $add-col: true;
//  //      }
//  //    }
//  //    @if $c6 != 1 {
//  //      @if $i / $c6 == round($i / $c6) {
//  //        $add-col: true;
//  //      }
//  //    }
//  //    @if $add-col {
//  //      $compound-grid: join($compound-grid, $compound-counter, comma);
//  //      $compound-counter: 1;
//  //    }
//  //    @else {
//  //      $compound-counter: $compound-counter + 1;
//  //    }
//  //  }
//  @return 1;
//}
